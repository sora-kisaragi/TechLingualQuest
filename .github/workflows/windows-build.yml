name: Windows Build

on:
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

permissions:
  contents: read
  actions: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  FLUTTER_VERSION: '3.35.3'

jobs:
  build-windows:
    runs-on: windows-latest
    name: Build Windows Application
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        cache: true

    - name: Enable Windows desktop
      run: flutter config --enable-windows-desktop

    - name: Get dependencies
      env:
        APP_ENV: prod
        DATABASE_NAME: tech_lingual_quest.db
        API_BASE_URL: https://api.example.com
        LOG_LEVEL: error
      run: flutter pub get

    - name: Build Windows (Release)
      run: |
        $env:APP_ENV="prod"
        $env:DATABASE_NAME="tech_lingual_quest.db"
        $env:API_BASE_URL="https://api.example.com"
        flutter build windows --release
        Write-Host "Windows build completed successfully"

    - name: Prepare Windows package
      id: package
      run: |
        # ビルド成果物のパスを確認
        $buildPath = "build\windows\x64\runner\Release"
        if (Test-Path $buildPath) {
          Write-Host "✅ Build artifacts found at: $buildPath"
          
          # パッケージディレクトリを作成
          $packageDir = "windows-package"
          New-Item -ItemType Directory -Force -Path $packageDir
          
          # 必要なファイルをコピー
          Copy-Item -Path "$buildPath\*" -Destination $packageDir -Recurse -Force
          
          # サイズ情報を取得
          $totalSize = (Get-ChildItem -Path $packageDir -Recurse | Measure-Object -Property Length -Sum).Sum
          $sizeInMB = [math]::Round($totalSize / 1MB, 2)
          
          Write-Host "Package size: $sizeInMB MB"
          
          # GitHub Actionsの出力に設定
          echo "package_path=$packageDir" >> $env:GITHUB_OUTPUT
          echo "package_size_mb=$sizeInMB" >> $env:GITHUB_OUTPUT
          
          # ファイル一覧を出力
          Write-Host "📦 Package contents:"
          Get-ChildItem -Path $packageDir -Recurse -File | ForEach-Object {
            Write-Host "  - $($_.Name) ($([math]::Round($_.Length / 1KB, 1)) KB)"
          }
        } else {
          Write-Host "❌ Build artifacts not found"
          exit 1
        }

    - name: Create compressed archive
      id: compress
      run: |
        $packagePath = "${{ steps.package.outputs.package_path }}"
        $archiveName = "TechLingualQuest-Windows-${{ github.run_number }}.zip"
        
        # ZIPファイルを作成
        Compress-Archive -Path "$packagePath\*" -DestinationPath $archiveName -Force
        
        if (Test-Path $archiveName) {
          $archiveSize = [math]::Round((Get-Item $archiveName).Length / 1MB, 2)
          Write-Host "✅ Archive created: $archiveName ($archiveSize MB)"
          
          # GitHub Actionsの出力に設定
          echo "archive_name=$archiveName" >> $env:GITHUB_OUTPUT
          echo "archive_size_mb=$archiveSize" >> $env:GITHUB_OUTPUT
        } else {
          Write-Host "❌ Failed to create archive"
          exit 1
        }

    - name: Upload Windows build artifact
      uses: actions/upload-artifact@v4
      with:
        name: windows-build
        path: ${{ steps.compress.outputs.archive_name }}
        retention-days: 7

    - name: Send Slack notification with build results
      if: vars.SLACK_WEBHOOK_URL
      run: |
        $status = "success"
        $emoji = ":white_check_mark:"
        $color = "#28a745"
        
        # Slackメッセージを送信
        $payload = @{
          text = "$emoji Windows ビルド完了"
          blocks = @(
            @{
              type = "header"
              text = @{
                type = "plain_text"
                text = "$emoji TechLingualQuest Windows ビルド完了"
              }
            },
            @{
              type = "section"
              text = @{
                type = "mrkdwn"
                text = "Windowsアプリケーションのビルドが正常に完了しました。`n`nパッケージサイズ: *${{ steps.package.outputs.package_size_mb }} MB*`n圧縮後サイズ: *${{ steps.compress.outputs.archive_size_mb }} MB*"
              }
            },
            @{
              type = "section"
              fields = @(
                @{type = "mrkdwn"; text = "*ブランチ:*`n${{ github.ref_name }}"},
                @{type = "mrkdwn"; text = "*コミット:*`n$(echo ${{ github.sha }} | cut -c1-7)"},
                @{type = "mrkdwn"; text = "*実行者:*`n${{ github.actor }}"},
                @{type = "mrkdwn"; text = "*成果物:*`n${{ steps.compress.outputs.archive_name }}"}
              )
            }
          )
        } | ConvertTo-Json -Depth 10
        
        Invoke-RestMethod -Uri "${{ vars.SLACK_WEBHOOK_URL }}" -Method Post -Body $payload -ContentType "application/json"

    - name: Send Discord notification with build results
      if: vars.DISCORD_WEBHOOK_URL
      run: |
        $payload = @{
          embeds = @(
            @{
              title = ":gear: Windows ビルド完了"
              description = "TechLingualQuest Windowsアプリケーションのビルドが正常に完了しました"
              color = 3066993
              fields = @(
                @{name = "パッケージサイズ"; value = "${{ steps.package.outputs.package_size_mb }} MB"; inline = $true},
                @{name = "圧縮後サイズ"; value = "${{ steps.compress.outputs.archive_size_mb }} MB"; inline = $true},
                @{name = "ブランチ"; value = "${{ github.ref_name }}"; inline = $true},
                @{name = "コミット"; value = "$(echo ${{ github.sha }} | cut -c1-7)"; inline = $true},
                @{name = "実行者"; value = "${{ github.actor }}"; inline = $true},
                @{name = "成果物"; value = "${{ steps.compress.outputs.archive_name }}"; inline = $false}
              )
              footer = @{text = "GitHub Actions Windows Build"}
              timestamp = "$(Get-Date -Format 'yyyy-MM-ddTHH:mm:ss.fffZ')"
            }
          )
        } | ConvertTo-Json -Depth 10
        
        Invoke-RestMethod -Uri "${{ vars.DISCORD_WEBHOOK_URL }}" -Method Post -Body $payload -ContentType "application/json"

    - name: Record build results for unified notification
      run: |
        echo "✅ Windowsビルド完了"
        echo "パッケージサイズ: ${{ steps.package.outputs.package_size_mb }} MB"
        echo "圧縮後サイズ: ${{ steps.compress.outputs.archive_size_mb }} MB"
        echo "成果物: ${{ steps.compress.outputs.archive_name }}"

