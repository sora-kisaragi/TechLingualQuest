name: Flutter CI/CD

on:
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

permissions:
  contents: read
  actions: read
  security-events: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  FLUTTER_VERSION: '3.35.3'

jobs:
  # 依存関係とコード品質チェック
  quality-check:
    runs-on: ubuntu-latest
    name: Code Quality & Dependency Check

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        cache: true

    - name: Get dependencies
      env:
        APP_ENV: dev
        DATABASE_NAME: tech_lingual_quest_test.db
        API_BASE_URL: https://api.example.com
        LOG_LEVEL: error
      run: flutter pub get

    - name: Analyze project source
      env:
        APP_ENV: dev
        DATABASE_NAME: tech_lingual_quest_test.db
        API_BASE_URL: https://api.example.com
        LOG_LEVEL: error
      run: flutter analyze --no-fatal-infos || echo "静的解析で警告が検出されました"

    - name: Validate project structure
      run: ./validate_flutter_setup.sh

  # テスト実行
  test:
    runs-on: ubuntu-latest
    name: Unit & Widget Tests
    needs: quality-check

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        cache: true

    - name: Get dependencies
      env:
        APP_ENV: dev
        DATABASE_NAME: tech_lingual_quest_test.db
        API_BASE_URL: https://api.example.com
        LOG_LEVEL: error
      run: flutter pub get

    - name: Run tests with coverage
      env:
        APP_ENV: dev
        DATABASE_NAME: tech_lingual_quest_test.db
        API_BASE_URL: https://api.example.com
        LOG_LEVEL: error
        ENABLE_ANALYTICS: false
        ENABLE_CRASHLYTICS: false
      run: |
        flutter test --coverage
        # codecovレポート用のテストカバレッジファイルが作成されていることを確認
        if [ -f coverage/lcov.info ]; then
          echo "Coverage file generated successfully"
          head -10 coverage/lcov.info
        else
          echo "Warning: Coverage file not generated"
        fi

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: coverage/lcov.info
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}
        verbose: true

  build:
    runs-on: ubuntu-latest
    name: Build Applications
    needs: quality-check  # testと並列実行
    strategy:
      fail-fast: false  # 一つが失敗しても他を継続
      matrix:
        build-type: [android-apk, android-appbundle, web]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        cache: true

    - name: Setup Java (Android builds)
      if: startsWith(matrix.build-type, 'android') && (github.base_ref == 'main' || github.ref_name == 'main')
      uses: actions/setup-java@v4
      with:
        distribution: 'zulu'
        java-version: '11'

    - name: Get dependencies
      env:
        APP_ENV: prod
        DATABASE_NAME: tech_lingual_quest.db
        API_BASE_URL: https://api.example.com
        LOG_LEVEL: error
      run: flutter pub get

    - name: Build Android APK
      if: matrix.build-type == 'android-apk' && (github.base_ref == 'main' || github.ref_name == 'main')
      run: |
        # Android APK 向けの環境変数を設定
        export APP_ENV=prod
        export DATABASE_NAME=tech_lingual_quest.db
        export API_BASE_URL=https://api.example.com
        # CI環境でのGradleヒープサイズを増加（ローカル開発には影響しない）
        export GRADLE_OPTS="-Xmx4G -XX:MaxMetaspaceSize=1G -XX:ReservedCodeCacheSize=512m -XX:+HeapDumpOnOutOfMemoryError"
        flutter build apk --release
        echo "APK_PATH=$(find build/app/outputs/flutter-apk -name '*.apk' | head -1)" >> $GITHUB_ENV

    - name: Build Android App Bundle
      if: matrix.build-type == 'android-appbundle' && (github.base_ref == 'main' || github.ref_name == 'main')
      run: |
        # Android App Bundle 向けの環境変数を設定
        export APP_ENV=prod
        export DATABASE_NAME=tech_lingual_quest.db
        export API_BASE_URL=https://api.example.com
        export GRADLE_OPTS="-Xmx4G -XX:MaxMetaspaceSize=1G -XX:ReservedCodeCacheSize=512m -XX:+HeapDumpOnOutOfMemoryError"
        flutter build appbundle --release
        echo "AAB_PATH=$(find build/app/outputs/bundle -name '*.aab' | head -1)" >> $GITHUB_ENV

    - name: Build Web
      if: matrix.build-type == 'web'
      run: |
        # Web 向けの環境変数を設定
        export APP_ENV=prod
        export DATABASE_NAME=tech_lingual_quest.db
        export API_BASE_URL=https://api.example.com
        
        # Web用の依存関係の確認と設定
        echo "🌐 Webビルド用設定を確認中..."
        
        # Webビルドを実行（エラー詳細を表示）
        echo "🚀 Webビルドを開始..."
        flutter build web --release --web-renderer canvaskit --verbose || {
          echo "❌ canvaskitレンダラーでのビルドに失敗しました。htmlレンダラーで再試行します..."
          flutter build web --release --web-renderer html --verbose
        }
        
        # ビルド結果の確認
        if [ -d "build/web" ]; then
          echo "✅ Webビルド成功"
          echo "WEB_SIZE=$(du -sh build/web | cut -f1)" >> $GITHUB_ENV
          
          # 重要なファイルの存在確認
          if [ -f "build/web/index.html" ]; then
            echo "✅ index.html が生成されました"
          else
            echo "⚠️ 警告: index.html が見つかりません"
          fi
          
          if [ -f "build/web/main.dart.js" ] || [ -f "build/web/main.dart.js.gz" ]; then
            echo "✅ JavaScriptファイルが生成されました"
          else
            echo "⚠️ 警告: main.dart.js が見つかりません"
          fi
        else
          echo "❌ build/web ディレクトリが作成されませんでした"
          exit 1
        fi

    - name: Upload Android APK artifact
      if: matrix.build-type == 'android-apk' && (github.base_ref == 'main' || github.ref_name == 'main')
      uses: actions/upload-artifact@v4
      with:
        name: android-apk
        path: build/app/outputs/flutter-apk/*.apk
        retention-days: 7

    - name: Upload Android App Bundle artifact
      if: matrix.build-type == 'android-appbundle' && (github.base_ref == 'main' || github.ref_name == 'main')
      uses: actions/upload-artifact@v4
      with:
        name: android-appbundle
        path: build/app/outputs/bundle/*/*.aab
        retention-days: 7

    - name: Upload Web build artifact
      if: matrix.build-type == 'web'
      uses: actions/upload-artifact@v4
      with:
        name: web-build
        path: build/web/
        retention-days: 7

  # 結果記録（統合通知用）
  record-results:
    runs-on: ubuntu-latest
    name: Record Results for Summary
    needs: [quality-check, test, build]
    if: always()

    steps:
    - name: Record workflow results
      run: |
        echo "📊 ワークフロー実行結果を記録"
        echo "Quality Check: ${{ needs.quality-check.result }}"
        echo "Test: ${{ needs.test.result }}"
        echo "Build: ${{ needs.build.result }}"
        
        # 統合通知システムが結果を収集するのを支援
        if [[ "${{ needs.quality-check.result }}" == "success" && "${{ needs.test.result }}" == "success" && "${{ needs.build.result }}" == "success" ]]; then
          echo "✅ Flutter CI/CD: 全プロセス正常完了"
          echo "workflow_status=success" >> $GITHUB_ENV
        else
          echo "❌ Flutter CI/CD: 一部プロセスでエラー発生"
          echo "workflow_status=failure" >> $GITHUB_ENV
        fi
