name: Flutter CI/CD

on:
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

permissions:
  contents: read
  actions: read
  security-events: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  FLUTTER_VERSION: '3.35.3'

jobs:
  # 依存関係とコード品質チェック
  quality-check:
    runs-on: ubuntu-latest
    name: Code Quality & Dependency Check

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        cache: true

    - name: Get dependencies
      env:
        APP_ENV: dev
        DATABASE_NAME: tech_lingual_quest_test.db
        API_BASE_URL: https://api.example.com
        LOG_LEVEL: error
      run: flutter pub get

    - name: Analyze project source
      env:
        APP_ENV: dev
        DATABASE_NAME: tech_lingual_quest_test.db
        API_BASE_URL: https://api.example.com
        LOG_LEVEL: error
      run: flutter analyze --no-fatal-infos || echo "静的解析で警告が検出されました"

    - name: Validate project structure
      run: ./validate_flutter_setup.sh

  # テスト実行
  test:
    runs-on: ubuntu-latest
    name: Unit & Widget Tests
    needs: quality-check

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        cache: true

    - name: Get dependencies
      env:
        APP_ENV: dev
        DATABASE_NAME: tech_lingual_quest_test.db
        API_BASE_URL: https://api.example.com
        LOG_LEVEL: error
      run: flutter pub get

    - name: Run tests with coverage
      env:
        APP_ENV: dev
        DATABASE_NAME: tech_lingual_quest_test.db
        API_BASE_URL: https://api.example.com
        LOG_LEVEL: error
        ENABLE_ANALYTICS: false
        ENABLE_CRASHLYTICS: false
      run: |
        flutter test --coverage
        # codecovレポート用のテストカバレッジファイルが作成されていることを確認
        if [ -f coverage/lcov.info ]; then
          echo "Coverage file generated successfully"
          head -10 coverage/lcov.info
        else
          echo "Warning: Coverage file not generated"
        fi

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: coverage/lcov.info
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}
        verbose: true

  build:
    runs-on: ubuntu-latest
    name: Build Applications
    needs: quality-check  # testと並列実行
    strategy:
      fail-fast: false  # 一つが失敗しても他を継続
      matrix:
        build-type: [android-apk, android-appbundle, web]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        cache: true

    - name: Setup Java (Android builds)
      if: startsWith(matrix.build-type, 'android') && (github.base_ref == 'main' || github.ref_name == 'main')
      uses: actions/setup-java@v4
      with:
        distribution: 'zulu'
        java-version: '11'

    - name: Get dependencies
      env:
        APP_ENV: prod
        DATABASE_NAME: tech_lingual_quest.db
        API_BASE_URL: https://api.example.com
        LOG_LEVEL: error
      run: flutter pub get

    - name: Build Android APK
      if: matrix.build-type == 'android-apk' && (github.base_ref == 'main' || github.ref_name == 'main')
      run: |
        # Android APK 向けの環境変数を設定
        export APP_ENV=prod
        export DATABASE_NAME=tech_lingual_quest.db
        export API_BASE_URL=https://api.example.com
        # CI環境でのGradleヒープサイズを増加（ローカル開発には影響しない）
        export GRADLE_OPTS="-Xmx4G -XX:MaxMetaspaceSize=1G -XX:ReservedCodeCacheSize=512m -XX:+HeapDumpOnOutOfMemoryError"
        flutter build apk --release
        echo "APK_PATH=$(find build/app/outputs/flutter-apk -name '*.apk' | head -1)" >> $GITHUB_ENV

    - name: Build Android App Bundle
      if: matrix.build-type == 'android-appbundle' && (github.base_ref == 'main' || github.ref_name == 'main')
      run: |
        # Android App Bundle 向けの環境変数を設定
        export APP_ENV=prod
        export DATABASE_NAME=tech_lingual_quest.db
        export API_BASE_URL=https://api.example.com
        export GRADLE_OPTS="-Xmx4G -XX:MaxMetaspaceSize=1G -XX:ReservedCodeCacheSize=512m -XX:+HeapDumpOnOutOfMemoryError"
        flutter build appbundle --release
        echo "AAB_PATH=$(find build/app/outputs/bundle -name '*.aab' | head -1)" >> $GITHUB_ENV

    - name: Build Web
      if: matrix.build-type == 'web'
      run: |
        # Web 向けの環境変数を設定
        export APP_ENV=prod
        export DATABASE_NAME=tech_lingual_quest.db
        export API_BASE_URL=https://api.example.com
        
        # Web用の依存関係の確認と設定
        echo "🌐 Webビルド用設定を確認中..."
        
        # 必要なWebアセットの確認
        echo "📂 Webアセットの存在確認..."
        if [ ! -f "web/favicon.png" ]; then
          echo "⚠️ favicon.png が見つかりません"
          exit 1
        fi
        if [ ! -d "web/icons" ]; then
          echo "⚠️ web/icons ディレクトリが見つかりません"
          exit 1
        fi
        
        # Webビルドを実行（エラー詳細を表示）
        echo "🚀 Webビルドを開始..."
        flutter build web --release --verbose || {
          echo "❌ Webビルドに失敗しました。クリーンビルドで再試行します..."
          flutter clean
          flutter pub get
          flutter build web --release --verbose
        }
        
        # ビルド結果の確認
        if [ -d "build/web" ]; then
          echo "✅ Webビルド成功"
          echo "WEB_SIZE=$(du -sh build/web | cut -f1)" >> $GITHUB_ENV
          
          # 重要なファイルの存在確認
          if [ -f "build/web/index.html" ]; then
            echo "✅ index.html が生成されました"
          else
            echo "⚠️ 警告: index.html が見つかりません"
          fi
          
          if [ -f "build/web/main.dart.js" ] || [ -f "build/web/main.dart.js.gz" ]; then
            echo "✅ JavaScriptファイルが生成されました"
          else
            echo "⚠️ 警告: main.dart.js が見つかりません"
          fi
        else
          echo "❌ build/web ディレクトリが作成されませんでした"
          exit 1
        fi

    - name: Upload Android APK artifact
      if: matrix.build-type == 'android-apk' && (github.base_ref == 'main' || github.ref_name == 'main')
      uses: actions/upload-artifact@v4
      with:
        name: android-apk
        path: build/app/outputs/flutter-apk/*.apk
        retention-days: 7

    - name: Upload Android App Bundle artifact
      if: matrix.build-type == 'android-appbundle' && (github.base_ref == 'main' || github.ref_name == 'main')
      uses: actions/upload-artifact@v4
      with:
        name: android-appbundle
        path: build/app/outputs/bundle/*/*.aab
        retention-days: 7

    - name: Upload Web build artifact
      if: matrix.build-type == 'web'
      uses: actions/upload-artifact@v4
      with:
        name: web-build
        path: build/web/
        retention-days: 7

  # 個別通知送信
  send-notifications:
    runs-on: ubuntu-latest
    name: Send Workflow Notifications
    needs: [quality-check, test, build]
    if: always()

    steps:
    - name: Determine workflow status
      id: status
      run: |
        # コミットSHAの短縮版を作成
        SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)
        echo "short_sha=$SHORT_SHA" >> $GITHUB_OUTPUT
        
        QUALITY_CHECK="${{ needs.quality-check.result }}"
        TEST_RESULT="${{ needs.test.result }}"
        BUILD_RESULT="${{ needs.build.result }}"
        
        echo "📊 ワークフロー実行結果:"
        echo "Quality Check: $QUALITY_CHECK"
        echo "Test: $TEST_RESULT"
        echo "Build: $BUILD_RESULT"
        
        # 全体ステータスの判定
        if [[ "$QUALITY_CHECK" == "success" && "$TEST_RESULT" == "success" && "$BUILD_RESULT" == "success" ]]; then
          OVERALL_STATUS="success"
          STATUS_EMOJI="✅"
          STATUS_COLOR="3066993"
          STATUS_MESSAGE="Flutter CI/CD パイプラインが正常に完了しました"
        else
          OVERALL_STATUS="failure"
          STATUS_EMOJI="❌"
          STATUS_COLOR="15158332"
          STATUS_MESSAGE="Flutter CI/CD パイプラインでエラーが発生しました"
        fi
        
        echo "overall_status=$OVERALL_STATUS" >> $GITHUB_OUTPUT
        echo "status_emoji=$STATUS_EMOJI" >> $GITHUB_OUTPUT
        echo "status_color=$STATUS_COLOR" >> $GITHUB_OUTPUT
        echo "status_message=$STATUS_MESSAGE" >> $GITHUB_OUTPUT

    - name: Send Slack notification
      if: always() && vars.SLACK_WEBHOOK_URL
      run: |
        echo "📤 Slack通知を送信中..."
        echo "   └ 通知内容: ${{ steps.status.outputs.status_message }}"
        
        # 詳細結果の構築
        DETAIL_TEXT=""
        DETAIL_TEXT="${DETAIL_TEXT}*各ステップの実行結果:*\n"
        DETAIL_TEXT="${DETAIL_TEXT}• コード品質チェック: ${{ needs.quality-check.result }}\n"
        DETAIL_TEXT="${DETAIL_TEXT}• テスト実行: ${{ needs.test.result }}\n"
        DETAIL_TEXT="${DETAIL_TEXT}• ビルド: ${{ needs.build.result }}\n\n"
        
        # Slack通知送信
        curl -X POST -H 'Content-type: application/json' \
        --data '{
          "text": "${{ steps.status.outputs.status_emoji }} Flutter CI/CD 完了",
          "blocks": [
            {
              "type": "header",
              "text": {
                "type": "plain_text", 
                "text": "${{ steps.status.outputs.status_emoji }} TechLingual Quest Flutter CI/CD"
              }
            },
            {
              "type": "section",
              "text": {
                "type": "mrkdwn",
                "text": "${{ steps.status.outputs.status_message }}\n\n'"$DETAIL_TEXT"'"
              }
            },
            {
              "type": "section", 
              "fields": [
                {"type": "mrkdwn", "text": "*ブランチ:*\n${{ github.ref_name }}"},
                {"type": "mrkdwn", "text": "*コミット:*\n${{ steps.status.outputs.short_sha }}"},
                {"type": "mrkdwn", "text": "*実行者:*\n${{ github.actor }}"},
                {"type": "mrkdwn", "text": "*PR番号:*\n#${{ github.event.pull_request.number || 'N/A' }}"}
              ]
            },
            {
              "type": "actions",
              "elements": [
                {
                  "type": "button",
                  "text": {
                    "type": "plain_text",
                    "text": "📊 詳細をGitHub Actionsで確認"
                  },
                  "url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}",
                  "style": "primary"
                }
              ]
            }
          ]
        }' \
        "${{ vars.SLACK_WEBHOOK_URL }}"
        
        SLACK_RESPONSE=$?
        if [ $SLACK_RESPONSE -eq 0 ]; then
          echo "✅ Slack通知の送信が完了しました"
        else
          echo "❌ Slack通知の送信に失敗しました (終了コード: $SLACK_RESPONSE)"
        fi

    - name: Send Discord notification
      if: always() && vars.DISCORD_WEBHOOK_URL
      run: |
        echo "📤 Discord通知を送信中..."
        echo "   └ 通知内容: ${{ steps.status.outputs.status_message }}"
        
        curl -H "Content-Type: application/json" \
        -d '{
          "embeds": [{
            "title": "${{ steps.status.outputs.status_emoji }} Flutter CI/CD 完了",
            "description": "${{ steps.status.outputs.status_message }}",
            "color": ${{ steps.status.outputs.status_color }},
            "fields": [
              {"name": "ブランチ", "value": "${{ github.ref_name }}", "inline": true},
              {"name": "コミット", "value": "${{ steps.status.outputs.short_sha }}", "inline": true},
              {"name": "実行者", "value": "${{ github.actor }}", "inline": true},
              {"name": "品質チェック", "value": "${{ needs.quality-check.result }}", "inline": true},
              {"name": "テスト", "value": "${{ needs.test.result }}", "inline": true},
              {"name": "ビルド", "value": "${{ needs.build.result }}", "inline": true}
            ],
            "footer": {"text": "Flutter CI/CD Pipeline"},
            "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%S.000Z)'",
            "url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          }]
        }' \
        "${{ vars.DISCORD_WEBHOOK_URL }}"
        
        DISCORD_RESPONSE=$?
        if [ $DISCORD_RESPONSE -eq 0 ]; then
          echo "✅ Discord通知の送信が完了しました"
        else
          echo "❌ Discord通知の送信に失敗しました (終了コード: $DISCORD_RESPONSE)"
        fi
