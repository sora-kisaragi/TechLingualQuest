name: CI/CD Summary Report

on:
  workflow_run:
    workflows: 
      - "Flutter CI/CD"
      - "Security Scan"
      - "Format Fix"
      - "Windows Build"
    types:
      - completed
  workflow_dispatch:
    inputs:
      manual_summary:
        description: '手動でサマリーレポートを生成'
        required: false
        default: 'false'
      force_notifications:
        description: '通知を強制送信'
        required: false
        default: 'true'
        type: boolean

permissions:
  contents: read
  actions: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  collect-results:
    runs-on: ubuntu-latest
    name: Collect CI/CD Results
    if: github.event.workflow_run.event == 'pull_request' || github.event_name == 'workflow_dispatch'
    steps:
    - name: Wait for parallel workflows
      if: github.event_name == 'workflow_run'
      run: |
        # 他の並列ワークフローの完了を待機（最大10分）
        echo "⏳ 他のCI/CDワークフローの完了を待機中..."
        sleep 60  # 基本的な待機時間

    - name: Get workflow run results
      id: get_results
      run: |
        # PRの最新のワークフロー実行結果を取得
        if [ "${{ github.event_name }}" == "workflow_run" ]; then
          PR_NUMBER="${{ github.event.workflow_run.pull_requests[0].number || 'unknown' }}"
          COMMIT_SHA="${{ github.event.workflow_run.head_sha }}"
          BRANCH_NAME="${{ github.event.workflow_run.head_branch }}"
          ACTOR="${{ github.event.workflow_run.actor.login }}"
          REPO="${{ github.event.workflow_run.repository.full_name }}"
        else
          PR_NUMBER="manual"
          COMMIT_SHA="${{ github.sha }}"
          BRANCH_NAME="${{ github.ref_name }}"
          ACTOR="${{ github.actor }}"
          REPO="${{ github.repository }}"
        fi
        
        echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
        echo "commit_sha=$(echo $COMMIT_SHA | cut -c1-7)" >> $GITHUB_OUTPUT
        echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
        echo "actor=$ACTOR" >> $GITHUB_OUTPUT
        echo "repo=$REPO" >> $GITHUB_OUTPUT
        
        # GitHub API経由で同一コミットの最新ワークフロー結果を取得（簡易版）
        echo "flutter_status=unknown" >> $GITHUB_OUTPUT
        echo "security_status=unknown" >> $GITHUB_OUTPUT
        echo "format_status=unknown" >> $GITHUB_OUTPUT
        echo "windows_status=unknown" >> $GITHUB_OUTPUT
        
        # トリガーとなったワークフローの結果を設定
        if [ "${{ github.event_name }}" == "workflow_run" ]; then
          TRIGGERED_WORKFLOW="${{ github.event.workflow_run.name }}"
          TRIGGERED_STATUS="${{ github.event.workflow_run.conclusion }}"
          
          case "$TRIGGERED_WORKFLOW" in
            "Flutter CI/CD")
              echo "flutter_status=$TRIGGERED_STATUS" >> $GITHUB_OUTPUT
              ;;
            "Security Scan")
              echo "security_status=$TRIGGERED_STATUS" >> $GITHUB_OUTPUT
              ;;
            "Format Fix")
              echo "format_status=$TRIGGERED_STATUS" >> $GITHUB_OUTPUT
              ;;
            "Windows Build")
              echo "windows_status=$TRIGGERED_STATUS" >> $GITHUB_OUTPUT
              ;;
          esac
        fi

    - name: Evaluate overall status
      id: evaluate
      run: |
        # 各ワークフローのステータスを評価
        FLUTTER_STATUS="${{ steps.get_results.outputs.flutter_status }}"
        SECURITY_STATUS="${{ steps.get_results.outputs.security_status }}"  
        FORMAT_STATUS="${{ steps.get_results.outputs.format_status }}"
        WINDOWS_STATUS="${{ steps.get_results.outputs.windows_status }}"
        
        echo "Flutter CI/CD: $FLUTTER_STATUS"
        echo "Security Scan: $SECURITY_STATUS"
        echo "Format Fix: $FORMAT_STATUS"
        echo "Windows Build: $WINDOWS_STATUS"
        
        # 成功・失敗・不明の分類
        SUCCESS_COUNT=0
        FAILURE_COUNT=0
        UNKNOWN_COUNT=0
        
        for status in "$FLUTTER_STATUS" "$SECURITY_STATUS" "$FORMAT_STATUS" "$WINDOWS_STATUS"; do
          case "$status" in
            "success") ((SUCCESS_COUNT++)) ;;
            "failure") ((FAILURE_COUNT++)) ;;
            *) ((UNKNOWN_COUNT++)) ;;
          esac
        done
        
        # 全体ステータスの決定
        if [ $FAILURE_COUNT -gt 0 ]; then
          OVERALL_STATUS="failure"
          STATUS_EMOJI="❌"
          STATUS_COLOR="15158332"
          STATUS_MESSAGE="CI/CDパイプラインでエラーが発生しました"
        elif [ $UNKNOWN_COUNT -gt 0 ]; then
          OVERALL_STATUS="partial"  
          STATUS_EMOJI="⚠️"
          STATUS_COLOR="16776960"
          STATUS_MESSAGE="CI/CDパイプラインの一部が実行中または結果不明です"
        else
          OVERALL_STATUS="success"
          STATUS_EMOJI="✅"  
          STATUS_COLOR="3066993"
          STATUS_MESSAGE="全てのCI/CDパイプラインが正常に完了しました"
        fi
        
        echo "overall_status=$OVERALL_STATUS" >> $GITHUB_OUTPUT
        echo "status_emoji=$STATUS_EMOJI" >> $GITHUB_OUTPUT
        echo "status_color=$STATUS_COLOR" >> $GITHUB_OUTPUT
        echo "status_message=$STATUS_MESSAGE" >> $GITHUB_OUTPUT
        echo "success_count=$SUCCESS_COUNT" >> $GITHUB_OUTPUT
        echo "failure_count=$FAILURE_COUNT" >> $GITHUB_OUTPUT
        echo "unknown_count=$UNKNOWN_COUNT" >> $GITHUB_OUTPUT
        
        # 実行時間を推定
        echo "estimated_duration=約5分" >> $GITHUB_OUTPUT

    - name: Send unified Slack notification
      if: always() && vars.SLACK_WEBHOOK_URL
      run: |
        # 詳細ステータス情報の構築
        DETAIL_BLOCKS=""
        
        # 各ワークフローの詳細状況
        STATUS_DETAILS="*各ワークフローの実行結果:*\n"
        STATUS_DETAILS="${STATUS_DETAILS}• Flutter CI/CD: ${{ steps.get_results.outputs.flutter_status }}\n"
        STATUS_DETAILS="${STATUS_DETAILS}• Security Scan: ${{ steps.get_results.outputs.security_status }}\n"
        STATUS_DETAILS="${STATUS_DETAILS}• Format Fix: ${{ steps.get_results.outputs.format_status }}\n"
        STATUS_DETAILS="${STATUS_DETAILS}• Windows Build: ${{ steps.get_results.outputs.windows_status }}\n\n"
        
        if [ "${{ steps.evaluate.outputs.overall_status }}" != "success" ]; then
          if [ "${{ steps.evaluate.outputs.failure_count }}" -gt 0 ]; then
            STATUS_DETAILS="${STATUS_DETAILS}*対応が必要:* ${{ steps.evaluate.outputs.failure_count }}個のワークフローで問題が発生\n"
          fi
          if [ "${{ steps.evaluate.outputs.unknown_count }}" -gt 0 ]; then
            STATUS_DETAILS="${STATUS_DETAILS}*確認要:* ${{ steps.evaluate.outputs.unknown_count }}個のワークフローの結果が不明\n"
          fi
        else
          STATUS_DETAILS="${STATUS_DETAILS}*結果:* 全${{ steps.evaluate.outputs.success_count }}個のワークフローが正常完了 ✅"
        fi
        
        # GitHub Actionsの詳細へのリンク
        ACTIONS_URL="https://github.com/${{ steps.get_results.outputs.repo }}/actions"
        
        # Slack通知送信
        curl -X POST -H 'Content-type: application/json' \
        --data '{
          "text": "${{ steps.evaluate.outputs.status_emoji }} TechLingual Quest CI/CD 統合レポート",
          "blocks": [
            {
              "type": "header",
              "text": {
                "type": "plain_text", 
                "text": "${{ steps.evaluate.outputs.status_emoji }} TechLingual Quest CI/CD 統合レポート"
              }
            },
            {
              "type": "section",
              "text": {
                "type": "mrkdwn",
                "text": "${{ steps.evaluate.outputs.status_message }}\n\n'"$STATUS_DETAILS"'"
              }
            },
            {
              "type": "section", 
              "fields": [
                {"type": "mrkdwn", "text": "*PR/ブランチ:*\n#${{ steps.get_results.outputs.pr_number }} (${{ steps.get_results.outputs.branch_name }})"},
                {"type": "mrkdwn", "text": "*コミット:*\n${{ steps.get_results.outputs.commit_sha }}"},
                {"type": "mrkdwn", "text": "*実行者:*\n${{ steps.get_results.outputs.actor }}"},
                {"type": "mrkdwn", "text": "*実行時間:*\n${{ steps.evaluate.outputs.estimated_duration }}"}
              ]
            },
            {
              "type": "actions",
              "elements": [
                {
                  "type": "button",
                  "text": {
                    "type": "plain_text",
                    "text": "📊 GitHub Actions で詳細確認"
                  },
                  "url": "'"$ACTIONS_URL"'",
                  "style": "primary"
                },
                {
                  "type": "button",
                  "text": {
                    "type": "plain_text",
                    "text": "📦 ビルド成果物を確認"
                  },
                  "url": "'"$ACTIONS_URL"'"
                }
              ]
            }
          ]
        }' \
        ${{ vars.SLACK_WEBHOOK_URL }}

    - name: Send unified Discord notification
      if: always() && vars.DISCORD_WEBHOOK_URL  
      run: |
        # GitHub Actionsの詳細へのリンク
        ACTIONS_URL="https://github.com/${{ steps.get_results.outputs.repo }}/actions"
        
        # 失敗詳細の構築
        FAILURE_DETAILS=""
        if [ "${{ steps.get_results.outputs.flutter_status }}" == "failure" ]; then
          FAILURE_DETAILS="${FAILURE_DETAILS}• Flutter CI/CD: テスト・ビルドエラー\n"
        fi
        if [ "${{ steps.get_results.outputs.security_status }}" == "failure" ]; then
          FAILURE_DETAILS="${FAILURE_DETAILS}• Security Scan: 脆弱性検出\n"  
        fi
        if [ "${{ steps.get_results.outputs.format_status }}" == "failure" ]; then
          FAILURE_DETAILS="${FAILURE_DETAILS}• Format Fix: フォーマットエラー\n"
        fi
        if [ "${{ steps.get_results.outputs.windows_status }}" == "failure" ]; then
          FAILURE_DETAILS="${FAILURE_DETAILS}• Windows Build: ビルドエラー\n"
        fi
        
        DESCRIPTION_TEXT="${{ steps.evaluate.outputs.status_message }}"
        if [ -n "$FAILURE_DETAILS" ]; then
          DESCRIPTION_TEXT="${DESCRIPTION_TEXT}\n\n**失敗詳細:**\n${FAILURE_DETAILS}"
        fi
        
        curl -H "Content-Type: application/json" \
        -d '{
          "embeds": [{
            "title": "🔄 TechLingual Quest CI/CD 統合レポート",
            "description": "'"$DESCRIPTION_TEXT"'",
            "color": ${{ steps.evaluate.outputs.status_color }},
            "fields": [
              {"name": "PR番号", "value": "#${{ steps.get_results.outputs.pr_number }}", "inline": true},
              {"name": "ブランチ", "value": "${{ steps.get_results.outputs.branch_name }}", "inline": true},
              {"name": "コミット", "value": "${{ steps.get_results.outputs.commit_sha }}", "inline": true},
              {"name": "Flutter CI/CD", "value": "${{ steps.get_results.outputs.flutter_status }}", "inline": true},
              {"name": "Security Scan", "value": "${{ steps.get_results.outputs.security_status }}", "inline": true},
              {"name": "Format Fix", "value": "${{ steps.get_results.outputs.format_status }}", "inline": true},
              {"name": "Windows Build", "value": "${{ steps.get_results.outputs.windows_status }}", "inline": true},
              {"name": "実行者", "value": "${{ steps.get_results.outputs.actor }}", "inline": true}
            ],
            "footer": {"text": "GitHub Actions 統合レポート"},
            "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%S.000Z)'",
            "url": "'"$ACTIONS_URL"'"
          }]
        }' \
        ${{ vars.DISCORD_WEBHOOK_URL }}

    - name: Summary report
      run: |
        echo "📊 CI/CD統合レポート生成完了"
        echo "============================================="
        echo "全体ステータス: ${{ steps.evaluate.outputs.overall_status }}"
        echo "成功: ${{ steps.evaluate.outputs.success_count }}個"
        echo "失敗: ${{ steps.evaluate.outputs.failure_count }}個" 
        echo "不明: ${{ steps.evaluate.outputs.unknown_count }}個"
        echo "============================================="
        echo "${{ steps.evaluate.outputs.status_message }}"