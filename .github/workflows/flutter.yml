name: Flutter CI/CD

on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  actions: read
  security-events: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  FLUTTER_VERSION: '3.35.2'

jobs:
  # 依存関係とコード品質チェック
  quality-check:
    runs-on: ubuntu-latest
    name: Code Quality & Dependency Check

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        cache: true

    - name: Get dependencies
      env:
        APP_ENV: dev
        DATABASE_NAME: tech_lingual_quest_test.db
        API_BASE_URL: https://api.example.com
        LOG_LEVEL: error
      run: flutter pub get

    - name: Analyze project source
      env:
        APP_ENV: dev
        DATABASE_NAME: tech_lingual_quest_test.db
        API_BASE_URL: https://api.example.com
        LOG_LEVEL: error
      run: flutter analyze --no-fatal-infos || echo "静的解析で警告が検出されました"

    - name: Validate project structure
      run: ./validate_flutter_setup.sh

  # テスト実行
  test:
    runs-on: ubuntu-latest
    name: Unit & Widget Tests
    needs: quality-check

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        cache: true

    - name: Get dependencies
      env:
        APP_ENV: dev
        DATABASE_NAME: tech_lingual_quest_test.db
        API_BASE_URL: https://api.example.com
        LOG_LEVEL: error
      run: flutter pub get

    - name: Run tests with coverage
      env:
        APP_ENV: dev
        DATABASE_NAME: tech_lingual_quest_test.db
        API_BASE_URL: https://api.example.com
        LOG_LEVEL: error
        ENABLE_ANALYTICS: false
        ENABLE_CRASHLYTICS: false
      run: |
        flutter test --coverage
        # codecovレポート用のテストカバレッジファイルが作成されていることを確認
        if [ -f coverage/lcov.info ]; then
          echo "Coverage file generated successfully"
          head -10 coverage/lcov.info
        else
          echo "Warning: Coverage file not generated"
        fi

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: coverage/lcov.info
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}
        verbose: true

  # ビルド (Android, iOS, Web) - 並列実行で時間短縮
  build:
    runs-on: ubuntu-latest
    name: Build Applications
    needs: quality-check  # testと並列実行
    strategy:
      fail-fast: false  # 一つが失敗しても他を継続
      matrix:
        build-type: [android-apk, android-appbundle, web]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        cache: true

    - name: Setup Java (Android builds)
      if: startsWith(matrix.build-type, 'android')
      uses: actions/setup-java@v4
      with:
        distribution: 'zulu'
        java-version: '11'

    - name: Get dependencies
      env:
        APP_ENV: prod
        DATABASE_NAME: tech_lingual_quest.db
        API_BASE_URL: https://api.example.com
        LOG_LEVEL: error
      run: flutter pub get

    - name: Build Android APK
      if: matrix.build-type == 'android-apk'
      run: |
        # Android APK 向けの環境変数を設定
        export APP_ENV=prod
        export DATABASE_NAME=tech_lingual_quest.db
        export API_BASE_URL=https://api.example.com
        # CI環境でのGradleヒープサイズを増加（ローカル開発には影響しない）
        export GRADLE_OPTS="-Xmx4G -XX:MaxMetaspaceSize=1G -XX:ReservedCodeCacheSize=512m -XX:+HeapDumpOnOutOfMemoryError"
        flutter build apk --release
        echo "APK_PATH=$(find build/app/outputs/flutter-apk -name '*.apk' | head -1)" >> $GITHUB_ENV

    - name: Build Android App Bundle
      if: matrix.build-type == 'android-appbundle'
      run: |
        # Android App Bundle 向けの環境変数を設定
        export APP_ENV=prod
        export DATABASE_NAME=tech_lingual_quest.db
        export API_BASE_URL=https://api.example.com
        export GRADLE_OPTS="-Xmx4G -XX:MaxMetaspaceSize=1G -XX:ReservedCodeCacheSize=512m -XX:+HeapDumpOnOutOfMemoryError"
        flutter build appbundle --release
        echo "AAB_PATH=$(find build/app/outputs/bundle -name '*.aab' | head -1)" >> $GITHUB_ENV

    - name: Build Web
      if: matrix.build-type == 'web'
      run: |
        # Web 向けの環境変数を設定
        export APP_ENV=prod
        export DATABASE_NAME=tech_lingual_quest.db
        export API_BASE_URL=https://api.example.com
        flutter build web --release --web-renderer canvaskit
        echo "WEB_SIZE=$(du -sh build/web | cut -f1)" >> $GITHUB_ENV

    - name: Upload Android APK artifact
      if: matrix.build-type == 'android-apk'
      uses: actions/upload-artifact@v4
      with:
        name: android-apk
        path: build/app/outputs/flutter-apk/*.apk
        retention-days: 7

    - name: Upload Android App Bundle artifact
      if: matrix.build-type == 'android-appbundle'
      uses: actions/upload-artifact@v4
      with:
        name: android-appbundle
        path: build/app/outputs/bundle/*/*.aab
        retention-days: 7

    - name: Upload Web build artifact
      if: matrix.build-type == 'web'
      uses: actions/upload-artifact@v4
      with:
        name: web-build
        path: build/web/
        retention-days: 7

  # 通知処理
  notify:
    runs-on: ubuntu-latest
    name: Send Notifications
    needs: [quality-check, test, build]
    if: always()

    steps:
    - name: Evaluate workflow results
      id: evaluate
      run: |
        if [[ "${{ needs.quality-check.result }}" == "success" && "${{ needs.test.result }}" == "success" && "${{ needs.build.result }}" == "success" ]]; then
          echo "status=success" >> $GITHUB_OUTPUT
          echo "message=✅ CI/CD パイプラインが正常に完了しました" >> $GITHUB_OUTPUT
          echo "color=3066993" >> $GITHUB_OUTPUT
        else
          echo "status=failure" >> $GITHUB_OUTPUT
          echo "message=❌ CI/CD パイプラインでエラーが発生しました" >> $GITHUB_OUTPUT
          echo "color=15158332" >> $GITHUB_OUTPUT
        fi

        echo "branch=${{ github.ref_name }}" >> $GITHUB_OUTPUT
        echo "commit=$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_OUTPUT
        echo "actor=${{ github.actor }}" >> $GITHUB_OUTPUT
        echo "repo=${{ github.repository }}" >> $GITHUB_OUTPUT
        echo "run_id=${{ github.run_id }}" >> $GITHUB_OUTPUT

    - name: Send Discord notification
      if: vars.DISCORD_WEBHOOK_URL
      run: |
        # 失敗した処理を特定
        FAILED_DETAILS=""
        if [ "${{ needs.quality-check.result }}" != "success" ]; then
          FAILED_DETAILS="${FAILED_DETAILS}• コード品質チェック: フォーマット・静的解析エラー\n"
        fi
        if [ "${{ needs.test.result }}" != "success" ]; then
          FAILED_DETAILS="${FAILED_DETAILS}• テスト実行: 単体・ウィジェットテスト失敗\n"
        fi
        if [ "${{ needs.build.result }}" != "success" ]; then
          FAILED_DETAILS="${FAILED_DETAILS}• ビルド処理: Android・Webビルドエラー\n"
        fi
        
        DESCRIPTION_TEXT="${{ steps.evaluate.outputs.message }}"
        if [ "${{ steps.evaluate.outputs.status }}" != "success" ] && [ -n "$FAILED_DETAILS" ]; then
          DESCRIPTION_TEXT="${DESCRIPTION_TEXT}\n\n**失敗詳細:**\n${FAILED_DETAILS}"
        fi
        
        curl -H "Content-Type: application/json" \
        -d '{
          "embeds": [{
            "title": "TechLingual Quest CI/CD",
            "description": "'"$DESCRIPTION_TEXT"'",
            "color": ${{ steps.evaluate.outputs.color }},
            "fields": [
              {"name": "ブランチ", "value": "${{ steps.evaluate.outputs.branch }}", "inline": true},
              {"name": "コミット", "value": "${{ steps.evaluate.outputs.commit }}", "inline": true},
              {"name": "実行者", "value": "${{ steps.evaluate.outputs.actor }}", "inline": true},
              {"name": "品質チェック", "value": "${{ needs.quality-check.result }}", "inline": true},
              {"name": "テスト", "value": "${{ needs.test.result }}", "inline": true},
              {"name": "ビルド", "value": "${{ needs.build.result }}", "inline": true},
              {"name": "ワークフロー", "value": "Flutter CI/CD", "inline": true},
              {"name": "実行環境", "value": "GitHub Actions", "inline": true}
            ],
            "footer": {"text": "GitHub Actions"},
            "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%S.000Z)'",
            "url": "https://github.com/${{ steps.evaluate.outputs.repo }}/actions/runs/${{ steps.evaluate.outputs.run_id }}"
          }]
        }' \
        ${{ vars.DISCORD_WEBHOOK_URL }}

    - name: Send Slack notification
      if: vars.SLACK_WEBHOOK_URL
      run: |
        STATUS_EMOJI="${{ steps.evaluate.outputs.status == 'success' && ':white_check_mark:' || ':x:' }}"
        
        # 失敗した処理を詳細に特定
        FAILED_JOBS=""
        if [ "${{ needs.quality-check.result }}" != "success" ]; then
          FAILED_JOBS="${FAILED_JOBS}• コード品質チェック (フォーマット・静的解析)\n"
        fi
        if [ "${{ needs.test.result }}" != "success" ]; then
          FAILED_JOBS="${FAILED_JOBS}• テスト実行 (単体・ウィジェットテスト)\n"
        fi
        if [ "${{ needs.build.result }}" != "success" ]; then
          FAILED_JOBS="${FAILED_JOBS}• ビルド処理 (Android APK・Web)\n"
        fi
        
        # 成功時と失敗時で異なるメッセージを構築
        if [ "${{ steps.evaluate.outputs.status }}" == "success" ]; then
          DETAIL_MESSAGE="全てのCI/CD処理が正常に完了しました。\n\n*完了した処理:*\n• コード品質チェック ✅\n• テスト実行 ✅\n• ビルド処理 ✅"
        else
          DETAIL_MESSAGE="CI/CD処理でエラーが発生しました。\n\n*失敗した処理:*\n${FAILED_JOBS}\n詳細な原因はログを確認してください。"
        fi
        
        curl -X POST -H 'Content-type: application/json' \
        --data '{
          "text": "'$STATUS_EMOJI' TechLingual Quest CI/CD",
          "blocks": [
            {
              "type": "header",
              "text": {
                "type": "plain_text",
                "text": "'$STATUS_EMOJI' TechLingual Quest CI/CD"
              }
            },
            {
              "type": "section",
              "text": {
                "type": "mrkdwn",
                "text": "'"$DETAIL_MESSAGE"'"
              }
            },
            {
              "type": "section",
              "fields": [
                {"type": "mrkdwn", "text": "*ブランチ:*\n${{ steps.evaluate.outputs.branch }}"},
                {"type": "mrkdwn", "text": "*コミット:*\n${{ steps.evaluate.outputs.commit }}"},
                {"type": "mrkdwn", "text": "*実行者:*\n${{ steps.evaluate.outputs.actor }}"},
                {"type": "mrkdwn", "text": "*ワークフロー:*\nFlutter CI/CD"}
              ]
            },
            {
              "type": "section",
              "fields": [
                {"type": "mrkdwn", "text": "*品質チェック:*\n${{ needs.quality-check.result }}"},
                {"type": "mrkdwn", "text": "*テスト実行:*\n${{ needs.test.result }}"},
                {"type": "mrkdwn", "text": "*ビルド処理:*\n${{ needs.build.result }}"},
                {"type": "mrkdwn", "text": "*実行時間:*\n約 ${{ github.event.workflow_run.run_duration_ms / 60000 || '不明' }} 分"}
              ]
            },
            {
              "type": "actions",
              "elements": [
                {
                  "type": "button",
                  "text": {
                    "type": "plain_text",
                    "text": "詳細ログを確認"
                  },
                  "url": "https://github.com/${{ steps.evaluate.outputs.repo }}/actions/runs/${{ steps.evaluate.outputs.run_id }}"
                }
              ]
            }
          ]
        }' \
        ${{ vars.SLACK_WEBHOOK_URL }}
