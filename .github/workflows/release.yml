name: Release Build

on:
  push:
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
    types: [ closed ]
  schedule:
    # 毎週月曜日の午前9時（JST）にリリース候補をチェック
    - cron: '0 0 * * 1'  # UTC 00:00 = JST 09:00
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'
      release_type:
        description: 'Release type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
          - beta
          - rc
      force_release:
        description: 'Force release even if no changes detected'
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  actions: read

env:
  FLUTTER_VERSION: '3.35.3'

jobs:
  # リリース前の最終チェック
  pre-release-checks:
    runs-on: ubuntu-latest
    name: Pre-Release Quality Checks
    outputs:
      should_release: ${{ steps.release_check.outputs.should_release }}
      release_reason: ${{ steps.release_check.outputs.release_reason }}
    if: >
      github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') ||
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'pull_request' && github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'main') ||
      github.event_name == 'schedule'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        cache: true

    - name: Get dependencies
      env:
        APP_ENV: dev
        DATABASE_NAME: tech_lingual_quest_test.db
        API_BASE_URL: https://api.example.com
        LOG_LEVEL: error
      run: flutter pub get

    - name: Run all tests
      env:
        APP_ENV: dev
        DATABASE_NAME: tech_lingual_quest_test.db
        API_BASE_URL: https://api.example.com
        LOG_LEVEL: error
        ENABLE_ANALYTICS: false
        ENABLE_CRASHLYTICS: false
      run: flutter test --coverage

    - name: Analyze code
      env:
        APP_ENV: dev
        DATABASE_NAME: tech_lingual_quest_test.db
        API_BASE_URL: https://api.example.com
        LOG_LEVEL: error
      run: flutter analyze

    - name: Check formatting
      run: dart format --output=none --set-exit-if-changed .

    - name: Determine release necessity
      id: release_check
      run: |
        SHOULD_RELEASE=false
        RELEASE_REASON=""
        
        if [ "${{ github.event_name }}" == "push" ] && [[ "${{ github.ref }}" == refs/tags/* ]]; then
          SHOULD_RELEASE=true
          RELEASE_REASON="タグ付きリリース (手動またはGitHub)"
        elif [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          SHOULD_RELEASE=true
          RELEASE_REASON="手動実行リリース"
        elif [ "${{ github.event_name }}" == "pull_request" ] && [ "${{ github.event.pull_request.merged }}" == "true" ]; then
          # mainブランチにマージされた場合、リリース対象のchangelogをチェック
          if git log --oneline HEAD~5..HEAD | grep -E "(feat|fix|BREAKING)" >/dev/null; then
            SHOULD_RELEASE=true
            RELEASE_REASON="mainブランチマージ後の自動リリース"
          else
            echo "⚠️ 重要な変更が検出されませんでした。リリースをスキップします。"
          fi
        elif [ "${{ github.event_name }}" == "schedule" ]; then
          # スケジュール実行の場合、前回リリースから一週間以上経過し、かつ変更がある場合
          LAST_RELEASE=$(git describe --tags --abbrev=0 HEAD 2>/dev/null || echo "")
          if [ -n "$LAST_RELEASE" ]; then
            DAYS_SINCE_RELEASE=$(( ( $(date +%s) - $(git log -1 --format="%ct" $LAST_RELEASE) ) / 86400 ))
            if [ $DAYS_SINCE_RELEASE -ge 7 ] && git log --oneline $LAST_RELEASE..HEAD | grep -E "(feat|fix)" >/dev/null; then
              SHOULD_RELEASE=true
              RELEASE_REASON="週次自動リリース (前回から${DAYS_SINCE_RELEASE}日経過)"
            fi
          fi
        fi
        
        echo "should_release=$SHOULD_RELEASE" >> $GITHUB_OUTPUT
        echo "release_reason=$RELEASE_REASON" >> $GITHUB_OUTPUT
        
        if [ "$SHOULD_RELEASE" == "true" ]; then
          echo "✅ リリース実行: $RELEASE_REASON"
        else
          echo "⏭️ リリースをスキップ: 実行条件を満たしていません"
        fi

    - name: Validate project structure
      if: steps.release_check.outputs.should_release == 'true' || github.event.inputs.force_release == 'true'
      run: ./validate_flutter_setup.sh

  # Android Release Build
  build-android:
    runs-on: ubuntu-latest
    name: Build Android Release
    needs: pre-release-checks
    if: needs.pre-release-checks.outputs.should_release == 'true' || github.event.inputs.force_release == 'true'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        cache: true

    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'zulu'
        java-version: '11'

    - name: Get dependencies
      env:
        APP_ENV: prod
        DATABASE_NAME: tech_lingual_quest.db
        API_BASE_URL: https://api.example.com
        LOG_LEVEL: error
      run: flutter pub get

    - name: Build Android APK (Release)
      run: |
        export APP_ENV=prod
        export DATABASE_NAME=tech_lingual_quest.db
        export API_BASE_URL=https://api.example.com
        export GRADLE_OPTS="-Xmx4G -XX:MaxMetaspaceSize=1G -XX:ReservedCodeCacheSize=512m -XX:+HeapDumpOnOutOfMemoryError"
        flutter build apk --release
        echo "APK_PATH=$(find build/app/outputs/flutter-apk -name '*.apk' | head -1)" >> $GITHUB_ENV
        echo "APK_SIZE=$(du -h build/app/outputs/flutter-apk/*.apk | cut -f1)" >> $GITHUB_ENV

    - name: Build Android App Bundle (Release)
      run: |
        export APP_ENV=prod
        export DATABASE_NAME=tech_lingual_quest.db
        export API_BASE_URL=https://api.example.com
        export GRADLE_OPTS="-Xmx4G -XX:MaxMetaspaceSize=1G -XX:ReservedCodeCacheSize=512m -XX:+HeapDumpOnOutOfMemoryError"
        flutter build appbundle --release
        echo "AAB_PATH=$(find build/app/outputs/bundle -name '*.aab' | head -1)" >> $GITHUB_ENV
        echo "AAB_SIZE=$(du -h build/app/outputs/bundle/*/*.aab | cut -f1)" >> $GITHUB_ENV

    - name: Upload Android Release APK
      uses: actions/upload-artifact@v4
      with:
        name: android-release-apk
        path: build/app/outputs/flutter-apk/*.apk
        retention-days: 30

    - name: Upload Android Release Bundle
      uses: actions/upload-artifact@v4
      with:
        name: android-release-bundle
        path: build/app/outputs/bundle/*/*.aab
        retention-days: 30

  # Web Release Build
  build-web:
    runs-on: ubuntu-latest
    name: Build Web Release
    needs: pre-release-checks
    if: needs.pre-release-checks.outputs.should_release == 'true' || github.event.inputs.force_release == 'true'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        cache: true

    - name: Get dependencies
      env:
        APP_ENV: prod
        DATABASE_NAME: tech_lingual_quest.db
        API_BASE_URL: https://api.example.com
        LOG_LEVEL: error
      run: flutter pub get

    - name: Build Web (Release)
      run: |
        export APP_ENV=prod
        export DATABASE_NAME=tech_lingual_quest.db
        export API_BASE_URL=https://api.example.com
        flutter build web --release --verbose
        echo "WEB_SIZE=$(du -sh build/web | cut -f1)" >> $GITHUB_ENV

    - name: Upload Web Release
      uses: actions/upload-artifact@v4
      with:
        name: web-release
        path: build/web/
        retention-days: 30

  # リリースノート作成とGitHub Release
  create-release:
    runs-on: ubuntu-latest
    name: Create GitHub Release
    needs: [pre-release-checks, build-android, build-web]
    if: (startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)) && (needs.pre-release-checks.outputs.should_release == 'true' || github.event.inputs.force_release == 'true')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get version from tag or input
      id: version
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
          RELEASE_TYPE="${{ github.event.inputs.release_type }}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "version_number=${VERSION#v}" >> $GITHUB_OUTPUT
          echo "release_type=$RELEASE_TYPE" >> $GITHUB_OUTPUT
        elif [[ "${{ github.ref }}" == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "version_number=${VERSION#v}" >> $GITHUB_OUTPUT
          echo "release_type=release" >> $GITHUB_OUTPUT
        else
          # 自動リリースの場合、適切なバージョンを生成
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD 2>/dev/null || echo "v0.0.0")
          NEXT_VERSION=$(echo $LAST_TAG | awk -F. '{$NF = $NF + 1;} 1' | sed 's/ /./g')
          echo "version=$NEXT_VERSION" >> $GITHUB_OUTPUT
          echo "version_number=${NEXT_VERSION#v}" >> $GITHUB_OUTPUT
          echo "release_type=auto" >> $GITHUB_OUTPUT
        fi

    - name: Generate release notes
      id: release_notes
      run: |
        # 前回のタグを取得
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")

        if [ -n "$PREVIOUS_TAG" ]; then
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "## 🚀 新機能と改善" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          git log --pretty=format:"- %s" $PREVIOUS_TAG..HEAD --grep="feat" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "## 🐛 バグ修正" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          git log --pretty=format:"- %s" $PREVIOUS_TAG..HEAD --grep="fix" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "## 📚 ドキュメント" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          git log --pretty=format:"- %s" $PREVIOUS_TAG..HEAD --grep="docs" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        else
          echo "changelog=初回リリース" >> $GITHUB_OUTPUT
        fi

    - name: Download Android APK
      uses: actions/download-artifact@v4
      with:
        name: android-release-apk
        path: ./release-assets/

    - name: Download Android Bundle
      uses: actions/download-artifact@v4
      with:
        name: android-release-bundle
        path: ./release-assets/

    - name: Download Web Release
      uses: actions/download-artifact@v4
      with:
        name: web-release
        path: ./web-release/

    - name: Create Web Release Archive
      run: |
        cd web-release
        zip -r ../release-assets/tech-lingual-quest-web-${{ steps.version.outputs.version }}.zip .

    - name: Rename APK for release
      run: |
        cd release-assets
        find . -name "*.apk" -exec mv {} tech-lingual-quest-${{ steps.version.outputs.version }}.apk \;

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      id: create_release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.version }}
        name: TechLingual Quest ${{ steps.version.outputs.version }}
        body: |
          # TechLingual Quest ${{ steps.version.outputs.version }}

          ${{ steps.release_notes.outputs.changelog }}

          ## 📱 ダウンロード

          - **Android APK**: スマートフォン・タブレット用（Google Play 外での配布）
          - **Android Bundle**: Google Play Store 向け配布用
          - **Web版**: ブラウザで動作するバージョン

          ## 🛠️ 技術仕様

          - Flutter SDK: ${{ env.FLUTTER_VERSION }}
          - 対応プラットフォーム: Android 5.0+, iOS 11.0+, Web (Chrome, Firefox, Safari)
          - ビルド日時: $(date '+%Y-%m-%d %H:%M:%S UTC')
        draft: false
        prerelease: false
        files: |
          ./release-assets/tech-lingual-quest-${{ steps.version.outputs.version }}.apk
          ./release-assets/tech-lingual-quest-web-${{ steps.version.outputs.version }}.zip

  # リリース通知
  notify-release:
    runs-on: ubuntu-latest
    name: Send Release Notifications
    needs: [create-release]
    if: always()

    steps:
    - name: Get version from tag
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Send Discord release notification
      if: vars.DISCORD_WEBHOOK_URL
      run: |
        curl -H "Content-Type: application/json" \
        -d '{
          "embeds": [{
            "title": "🎉 TechLingual Quest 新バージョンリリース!",
            "description": "バージョン ${{ steps.version.outputs.version }} がリリースされました！",
            "color": 3447003,
            "fields": [
              {"name": "バージョン", "value": "${{ steps.version.outputs.version }}", "inline": true},
              {"name": "プラットフォーム", "value": "Android・Web", "inline": true},
              {"name": "Flutter SDK", "value": "${{ env.FLUTTER_VERSION }}", "inline": true}
            ],
            "footer": {"text": "GitHub Releases"},
            "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%S.000Z)'",
            "url": "https://github.com/${{ github.repository }}/releases/tag/${{ steps.version.outputs.version }}"
          }]
        }' \
        ${{ vars.DISCORD_WEBHOOK_URL }}

    - name: Send Slack release notification
      if: vars.SLACK_WEBHOOK_URL
      run: |
        curl -X POST -H 'Content-type: application/json' \
        --data '{
          "text": "🎉 TechLingual Quest 新バージョンリリース!",
          "blocks": [
            {
              "type": "header",
              "text": {
                "type": "plain_text",
                "text": "🎉 TechLingual Quest ${{ steps.version.outputs.version }}"
              }
            },
            {
              "type": "section",
              "text": {
                "type": "mrkdwn",
                "text": "新しいバージョンがリリースされました！Android APK と Web版 が利用可能です。"
              }
            },
            {
              "type": "actions",
              "elements": [
                {
                  "type": "button",
                  "text": {
                    "type": "plain_text",
                    "text": "ダウンロードページを開く"
                  },
                  "url": "https://github.com/${{ github.repository }}/releases/tag/${{ steps.version.outputs.version }}"
                }
              ]
            }
          ]
        }' \
        ${{ vars.SLACK_WEBHOOK_URL }}
